189Problem

-> full Nums Array and Reverse
reverse ( nums , Start , end )

-> first element 
rever

reverser(nums , 0 , nums.length -1 )
	while (start  < end)
		int temp = nums[start]
		nums[start] = nums[end]
		nums[end] = int temps
		start ++
		end --



 1 2 3 4 5	6	7	8

 ->full	nums in array

  8  	2 3 4 5	6 7		1    

  8  	7 	3 4 5 6 	2		1
  8  	7 	6	 4 5 	3 	2		1
  8  	7 	6	 4 5 	3 	2		1



-> first Element  Array 

reverse(nums , 0 , k- 1 )

	8  	7 	6	 4 5 	3 	2		1

	8  	7 	6	 4 5 	3 	2		1  start =0  end =2

	6 	7	8  4 5 	3 	2 1 start =1 end =1 => Accepted end


reverse (nums  , k , nums.length -1)



121 Problem

3 8 1 4 7 5 

profit = 0 
for ( int i =0 ; i, n.length ; i ++)
		for (int j = i + 1 , j < n.length - 1 ; j++ )
				if ( nums[j] > nums[i] )

					profit = max ( profit , nums[j] - nums[i])

return profit ;




Method 2 
max_profit (prices)
buy = prices[0] ;

for(sell : price)
	if ( sell > buy  )
			profit  = max ( profit , sell - buy )
			//Math.max (profit ,sell - buy )
	else :
		buy = sell

return  profit


3 8 1 4 7 5

profit  = 5 

buy = sell -> buy =1 shell 1 -> shell =4 buy




122 Problem
int total_profit =  0 ;
es = [7,1,5,3,6,4]
for  ( int i=1 ; i<prices.length ; i++)
	int dailyProfit = Math.max(0 ,prices[i] - prices[i-1])
	total_profit += dailyProfit 

return total_profit

7, 1, 5, 3, 6, 4

dailyProfit = Math.max( 0 , prices[1] - proces [ 0])
	Math.max(0 ,)


// solving by create a new array 
profit = 0 
for ( int i =0 ; i, n.length ; i ++)
		for (int j = i + 1 , j < n.length - 1 ; j++ )
				if ( nums[j] > nums[i] )

					profit = max ( profit , nums[j] - nums[i])

		remove I theo J 


return profit ;
